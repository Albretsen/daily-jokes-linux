// Prisma schema file
// See https://www.prisma.io/docs/concepts/components/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique @db.VarChar(255)
  password          String             @db.VarChar(255)
  token             String             @unique @db.VarChar(255)
  deviceID          String?            @default("") @db.VarChar(255)
  name              String             @db.VarChar(255)
  createdAt         DateTime           @default(now())
  lastLoginAt       DateTime           @default(now())
  isActive          Boolean            @default(true)
  profile           String?            @default("0") @db.VarChar(255)
  backgroundId      String?            @default("0") @db.VarChar(255)
  jokes             Joke[]
  expoPushToken     String             @default("") @db.VarChar(255)
  role              String             @default("user") @db.VarChar(255)
  Coin              Coin[]
  JokeSubmission    JokeSubmission[]
  UserJokeLike      UserJokeLike[]
  Notification      Notification[]
  ContestResult     ContestResult[]
  profilePictures   ProfilePicture[]
  profileBackgrounds ProfileBackground[]

  @@index([email])
  @@index([token])
}

model Contest {
  id                Int              @id @default(autoincrement())
  date              DateTime         @unique
  topic             String
  resultsCalculated Boolean          @default(false)
  jokes             Joke[]
  JokeSubmission    JokeSubmission[]
  UserJokeLike      UserJokeLike[]
  bots              Boolean          @default(false)
  ContestResult     ContestResult[]
}

model Joke {
  id              Int              @id @default(autoincrement())
  userId          Int
  textBody        String
  createTimeStamp DateTime
  score           Float
  contestId       Int
  boost           Float            @default(0)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest         Contest          @relation(fields: [contestId], references: [id], onDelete: Cascade)
  UserJokeLike    UserJokeLike[]   
  ContestResult   ContestResult[]  

  @@index([userId])
  @@index([contestId])
}

model Coin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  coins  Int  @default(50)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JokeSubmission {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  contestId                Int
  jokesSubmitted           Int     @default(0)
  additionalSlotsPurchased Int     @default(0)
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest                  Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
}

model UserJokeLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  jokeId    Int
  contestId Int
  value     Int
  likedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  joke      Joke     @relation(fields: [jokeId], references: [id], onDelete: Cascade)
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, jokeId, contestId], name: "user_joke_contest_unique")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   @default("")
  title     String
  body      String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  expoId    String   @default("")
  data      Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ContestResult {
  id        Int     @id @default(autoincrement())
  contestId Int
  userId    Int
  coins     Int     @default(0)
  jokeId    Int
  score     Float
  rank      Int?
  read      Boolean @default(false)
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  joke      Joke    @relation(fields: [jokeId], references: [id], onDelete: Cascade)

  @@unique([contestId, userId])
  @@index([contestId])
  @@index([userId])
  @@index([jokeId])
}

model ProfilePicture {
  id        Int    @id @default(autoincrement())
  userId    Int
  pictureId String @db.VarChar(255)
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
}

model ProfileBackground {
  id            Int    @id @default(autoincrement())
  userId        Int
  backgroundId  String @db.VarChar(255)
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@index([userId])
}

model JokeDataset {
  id       Int    @id @default(autoincrement())
  body     String
  category String
  title    String
}
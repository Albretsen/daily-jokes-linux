// Prisma schema file
// See https://www.prisma.io/docs/concepts/components/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique @db.VarChar(255)
  password    String   @db.VarChar(255)
  token       String   @unique @db.VarChar(255)
  deviceID    String?  @default("") @db.VarChar(255)
  name        String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  lastLoginAt DateTime @default(now())
  isActive    Boolean  @default(true)
  profile     String?  @default("0") @db.VarChar(255)
  jokes       Joke[]

  Coin           Coin[]
  JokeSubmission JokeSubmission[]
  UserJokeLike   UserJokeLike[]
  Notification   Notification[]
  @@index([email])
  @@index([token])
  ContestResult ContestResult[]
}

model Contest {
  id             Int              @id @default(autoincrement())
  date           DateTime         @unique
  topic          String
  jokes          Joke[]
  JokeSubmission JokeSubmission[]
  UserJokeLike   UserJokeLike[]
  bots           Boolean          @default(false)
  ContestResult  ContestResult[]
}

model Joke {
  id              Int      @id @default(autoincrement())
  userId          Int
  textBody        String
  createTimeStamp DateTime
  score           Float
  contestId       Int
  user            User     @relation(fields: [userId], references: [id])
  contest         Contest  @relation(fields: [contestId], references: [id])

  UserJokeLike UserJokeLike[]
  @@index([userId])
  @@index([contestId])
  ContestResult ContestResult[]
}

model Coin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  coins  Int  @default(0)
  user   User @relation(fields: [userId], references: [id])
}

model JokeSubmission {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  contestId                Int
  jokesSubmitted           Int     @default(0)
  additionalSlotsPurchased Int     @default(0)
  user                     User    @relation(fields: [userId], references: [id])
  contest                  Contest @relation(fields: [contestId], references: [id])

  @@unique([userId, contestId])
}

model JokeDataset {
  id       Int    @id @default(autoincrement())
  body     String
  category String
  title    String
}

model UserJokeLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  jokeId    Int
  contestId Int
  value     Int
  likedAt   DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  joke    Joke    @relation(fields: [jokeId], references: [id])
  contest Contest @relation(fields: [contestId], references: [id])

  @@unique([userId, jokeId, contestId], name: "user_joke_contest_unique")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String // The type of notification (e.g., 'NewJokePosted', 'ContestResult', 'JokeLiked', 'DailyReminder')
  title     String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ContestResult {
  id        Int   @id @default(autoincrement())
  contestId Int
  userId    Int
  jokeId    Int // ID of the highest-scoring joke submitted by the user in the contest
  score     Float // Score of the highest-scoring joke
  rank      Int? // The ranking of the user in this specific contest, based on their highest-scoring joke

  contest Contest @relation(fields: [contestId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  joke    Joke    @relation(fields: [jokeId], references: [id])

  @@unique([contestId, userId])
  @@index([contestId])
  @@index([userId])
  @@index([jokeId])
}
